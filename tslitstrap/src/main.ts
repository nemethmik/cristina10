import {html, TemplateResult, } from "lit"
import {customElement, query} from "lit/decorators.js"
import {msg, localized,configureLocalization} from "@lit/localize"
import {MobxReactionUpdate} from "@adobe/lit-mobx"
import {BootBase,appStore,TPeopleEvent,TPeopleActions} from "./boot-base"
import "./page-people"
import "./page-headers"
import "./boot-toast"
import {BootToast} from "./boot-toast"
import {sourceLocale, targetLocales, allLocales} from "./loc/locale-codes" //generated by npx lit-localize build
import * as fr from "./loc/fr_FR"
import * as hu from "./loc/hu-HU"
type TTargetLocales = typeof targetLocales[number]
type TAllLocales = typeof allLocales[number]

//MobiX is needed only for elements contacted to the app state store
@localized()
@customElement("boot-app")
class BootApp extends MobxReactionUpdate(BootBase) {
   private _localeConfig = configureLocalization({
    sourceLocale,
    targetLocales,
    //loadLocale: (locale: string) => import(`loc/${locale}`), // It doesn't work with rollup builder
    loadLocale: async (localeStr: string) => {
      const loc = localeStr as TTargetLocales
      switch(loc) {
        case "fr_FR": return fr; break
        case "hu-HU": return hu; break
      }
    }
  })  
  async setLocale(loc:TAllLocales):Promise<void> {await this._localeConfig.setLocale(loc)}
  override connectedCallback():void {
    this.addEventListener(TPeopleEvent,((e:CustomEvent):void => {
      const detail = e.detail as TPeopleActions
      switch(detail.type) {
        case "Load": this.toast.show(msg(`People Re-loaded`),`${detail.numberOfPeopleLoaded} ${msg(`persons found`)}`); break
        case "Add": this.toast.show(msg(`New Person Added`),`${detail.person.firstName} ${msg(`added`)}`); break
      }
    }) as EventListener)
    this.setLocale("fr_FR")
    super.connectedCallback()
  }
  @query("boot-toast") toast!:BootToast
  override render():TemplateResult { return html`
    ${appStore.page == "People" ? html`<page-people></page-people>` : undefined}
    ${appStore.page == "Headers" ? html`<page-headers></page-headers>` : undefined}
    <boot-toast small="Small Text" message="Message Text"></boot-toast>
  `}
}
declare global { interface HTMLElementTagNameMap { "boot-app": BootApp}}


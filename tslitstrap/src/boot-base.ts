import bootstrapcss from "bootstrap/dist/css/bootstrap.min.css" //This is for Shadow DOM
import bootstrapicons from "bootstrap-icons/font/bootstrap-icons.css"
import {LitElement, unsafeCSS, TemplateResult} from "lit"
import {makeAutoObservable} from "mobx"
import {configureLocalization} from "@lit/localize"
import {sourceLocale, targetLocales, allLocales} from "./loc/locale-codes" //generated by npx lit-localize build
import * as fr from "./loc/fr_FR"
import * as hu from "./loc/hu-HU"
type TTargetLocales = typeof targetLocales[number]
type TAllLocales = typeof allLocales[number]

export const TPeopleEvent = "PeopleEvent"
//This is a discriminated union type definition for a reducer-like function 
//with type as the common field followed by the payload type
export type TPeopleActions = 
    {type: "Save", person: TPerson} //Save the data after being edited 
  | {type: "Edit", id: number} //Open a dialog box for the user to modify the data
  | {type: "Load", numberOfPeopleLoaded: number}
  | {type: "Delete", id: number}
  | {type: "Add", person: TPerson} 
export function dispatchPeopleEvent(el:HTMLElement,detail:TPeopleActions):void {
  el.dispatchEvent(new CustomEvent(TPeopleEvent,{detail,composed:true}))
}

export const TAppPages = {People:"People",Headers:"Headers"} as const

export type TPerson = {
    firstName: string,
    lastName: string,
    address?: {
        street: string,
        city: string,
        state: string,
        zip: string,
        country: string,
        phone: string
    },
    email: string
  }
  
export class BootBase extends LitElement {
  static styles = [unsafeCSS(bootstrapcss),unsafeCSS(bootstrapicons)]
}

const _localeConfig = configureLocalization({
    sourceLocale,
    targetLocales,
    //loadLocale: (locale: string) => import(`loc/${locale}`), // It doesn't work with rollup builder
    loadLocale: async (localeStr: string) => {
      const loc = localeStr as TTargetLocales
      switch(loc) {
        case "fr_FR": return fr; break
        case "hu-HU": return hu; break
      }
    }
  })  

class AppStore {
    async setLocale(loc:TAllLocales):Promise<void> {
        await _localeConfig.setLocale(loc)
    }
    get locale():TAllLocales {return _localeConfig.getLocale() as TAllLocales}
    private _page:keyof typeof TAppPages = "People"
    get page():keyof typeof TAppPages {return this._page}
    setPage(page:keyof typeof TAppPages):void {
        this._page = page
    }
    private _people:TPerson[] = []
    //get people():TPerson[] {return [...this._people]}
    get numberOfPeople():number {return this._people.length}
    peopleMap(f:(p:TPerson)=>TemplateResult):TemplateResult[] {
        return this._people.map(f)
    }
    constructor() {
        makeAutoObservable(this)
    }
    public async loadData(remote = true,notificationVia:HTMLElement | null = null):Promise<void> {
        //When the application is just paging around no need to reload the data unless
        //remote reload is enforced. 
        if(this.numberOfPeople == 0 || remote) {
            this.setPeople([])
            //await new Promise((r) => setTimeout(r, 1000)) // This is just a delayer to simulate long running tasks
            const endpoint = remote ? "https://demo.vaadin.com/demo-data/1.0/people?count=200" : "./people.json"
            this.setPeople((await (await fetch(endpoint)).json()).result)
            if(notificationVia) {
                dispatchPeopleEvent(notificationVia,{type:"Load",numberOfPeopleLoaded: this.numberOfPeople})
            }
        }
    }
    setPeople(people:TPerson[]):void {this._people = people}
    addPerson(p:TPerson):void {
        this.setPeople([p,...this._people])
    }
}

export const appStore = new AppStore()